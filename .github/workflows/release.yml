name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Build RouteX (Universal Binary)
      run: |
        # Build for ARM64 (Apple Silicon)
        echo "Building for ARM64 (Apple Silicon)..."
        swift build -c release --triple arm64-apple-macosx12.0
        ARM64_EXECUTABLE=".build/arm64-apple-macosx/release/RouteX"
        
        # Build for x86_64 (Intel)
        echo "Building for x86_64 (Intel)..."
        swift build -c release --triple x86_64-apple-macosx12.0
        X86_64_EXECUTABLE=".build/x86_64-apple-macosx/release/RouteX"
        
        # Create universal binary
        echo "Creating universal binary..."
        UNIVERSAL_EXECUTABLE=".build/release/RouteX"
        mkdir -p "$(dirname "$UNIVERSAL_EXECUTABLE")"
        
        # Use lipo to create universal binary
        lipo -create "$ARM64_EXECUTABLE" "$X86_64_EXECUTABLE" -output "$UNIVERSAL_EXECUTABLE"
        echo "Universal binary created successfully"
        
        # Verify universal binary
        echo "Verifying universal binary architecture..."
        file .build/release/RouteX
        lipo -info .build/release/RouteX
        
    - name: Create app bundle
      run: |
        mkdir -p RouteX.app/Contents/MacOS
        cp .build/release/RouteX RouteX.app/Contents/MacOS/
        cp RouteX/Info.plist RouteX.app/Contents/
        mkdir -p RouteX.app/Contents/Resources
        cp -r RouteX/Assets.xcassets RouteX.app/Contents/Resources/
        
        # Create app icon
        ICONSET_PATH="RouteX.app/Contents/Resources/AppIcon.iconset"
        mkdir -p "$ICONSET_PATH"
        cp RouteX.app/Contents/Resources/Assets.xcassets/AppIcon.appiconset/icon_*.png "$ICONSET_PATH/"
        iconutil -c icns "$ICONSET_PATH" -o RouteX.app/Contents/Resources/AppIcon.icns
        rm -rf "$ICONSET_PATH"
        
        chmod +x RouteX.app/Contents/MacOS/RouteX
        echo "App bundle created successfully"
        
        # Verify the universal binary in the app bundle
        echo "Verifying app bundle architecture..."
        file RouteX.app/Contents/MacOS/RouteX
        lipo -info RouteX.app/Contents/MacOS/RouteX
        
    - name: Create DMG
      run: |
        # Create DMG using hdiutil
        hdiutil create -volname "RouteX ${{ steps.get_version.outputs.VERSION }}" -srcfolder RouteX.app -ov -format UDZO RouteX-${{ steps.get_version.outputs.VERSION }}.dmg
        
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          RouteX-${{ steps.get_version.outputs.VERSION }}.dmg
        body: |
          ## RouteX ${{ steps.get_version.outputs.VERSION }}
          
          ### What's New
          - [List new features here]
          - [List bug fixes here]
          - [List improvements here]
          
          ### Installation
          1. Download the DMG file
          2. Open the DMG and drag RouteX to Applications
          3. Launch RouteX from Applications
          
          ### System Requirements
          - macOS 12.0 (Monterey) or later
          - Administrator privileges for route modifications
          
          ### Changes
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ### Support
          - [GitHub Issues](https://github.com/yourusername/routex/issues)
          - [Documentation](https://github.com/yourusername/routex#readme)
          
          ### Download
          - **macOS**: RouteX-${{ steps.get_version.outputs.VERSION }}.dmg
          
          ### Checksums
          ```
          SHA256: $(shasum -a 256 RouteX-${{ steps.get_version.outputs.VERSION }}.dmg | cut -d' ' -f1)
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload to GitHub Packages
      run: |
        # Upload the app bundle to GitHub Packages
        echo "Uploading to GitHub Packages..."
        
    - name: Notify community
      run: |
        echo "Release ${{ steps.get_version.outputs.VERSION }} published successfully!"
        echo "Download: https://github.com/yourusername/routex/releases/latest" 