name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: |
        swiftlint lint --reporter github-actions-logging
        
  security:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Security audit
      run: |
        echo "Running security audit..."
        
        # Check for hardcoded secrets (exclude legitimate Swift patterns)
        echo "Checking for hardcoded secrets..."
        
        # Create temporary file with exclusions
        cat > /tmp/security_exclusions.txt << 'EOF'
        # Exclude legitimate Swift patterns
        keyboardShortcut
        phantomRouteCacheKey
        for (key, value) in
        enum GatewayInputType
        case ip = "IP Address"
        case iface = "Interface"
        case mac = "MAC Address"
        EOF
        
        # Check for actual hardcoded secrets, excluding legitimate patterns
        if grep -r -i "password\|secret\|token\|api_key" RouteX/ --exclude-dir=*.git --exclude=*.md --exclude=*.plist | grep -v -f /tmp/security_exclusions.txt; then
          echo "Warning: Potential hardcoded secrets found"
          exit 1
        fi
        
        # Clean up
        rm -f /tmp/security_exclusions.txt
        
        # Check for proper file permissions
        echo "Checking file permissions..."
        find RouteX/ -type f -exec ls -la {} \;
        
        # Check for proper entitlements
        echo "Checking entitlements..."
        if [ -f "RouteX/RouteX.entitlements" ]; then
          echo "Entitlements file found"
        else
          echo "No entitlements file found - this may be intentional"
        fi
        
        echo "Security audit completed successfully"
        
  format:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check code formatting
      run: |
        echo "Checking code formatting..."
        
        # Check for trailing whitespace (exclude binary files and assets)
        if grep -r " $" RouteX/ \
          --exclude-dir=*.git \
          --exclude-dir=*.xcassets \
          --exclude=*.png \
          --exclude=*.jpg \
          --exclude=*.jpeg \
          --exclude=*.gif \
          --exclude=*.ico \
          --exclude=*.icns \
          --exclude=*.plist \
          --exclude=*.md \
          --exclude=*.json; then
          echo "Error: Found trailing whitespace"
          exit 1
        fi
        
        # Check for proper line endings (exclude binary files and assets)
        if grep -r $'\r' RouteX/ \
          --exclude-dir=*.git \
          --exclude-dir=*.xcassets \
          --exclude=*.png \
          --exclude=*.jpg \
          --exclude=*.jpeg \
          --exclude=*.gif \
          --exclude=*.ico \
          --exclude=*.icns \
          --exclude=*.plist \
          --exclude=*.md \
          --exclude=*.json; then
          echo "Error: Found Windows line endings"
          exit 1
        fi
        
        echo "Code formatting check passed" 